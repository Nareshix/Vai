name: Build Cross-Platform VAI Binaries

on:
  push:
    branches: [main]
    tags: ['v*'] # Also trigger on version tags
  pull_request:
    branches: [main]
  workflow_dispatch: # Allows manual triggering

jobs:
  build-x86_64-and-arm: # Renamed job for clarity as it now includes macOS ARM
    name: Build for ${{ matrix.os_name }} (${{ matrix.arch }})
    strategy:
      fail-fast: false # Don't cancel other jobs if one fails
      matrix:
        include:
          - os: ubuntu-latest
            os_name: Linux
            arch: x86_64
            artifact_suffix: linux-x86_64
            binary_pattern: "build/*.bin"
          - os: windows-latest
            os_name: Windows
            arch: x86_64
            artifact_suffix: windows-x86_64
            binary_pattern: "build/*.exe"
          - os: macos-14 # This runner is ARM64 for Apple Silicon
            os_name: macOS
            arch: ARM64
            artifact_suffix: macos-arm64
            binary_pattern: "build/**/*.app/"

    runs-on: ${{ matrix.os }}
    permissions:
      contents: read

    steps:
      - name: Check-out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' # Or your desired Python version
          cache: 'pip'
          cache-dependency-path: |
            pyproject.toml
            poetry.lock
            pdm.lock
            requirements*.txt

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install . # Installs 'vai' and its dependencies from pyproject.toml

      - name: Build Executable with Nuitka
        uses: Nuitka/Nuitka-Action@main
        with:
          nuitka-version: main
          script-name: vai/main.py # Adjust if needed

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: vai-${{ matrix.artifact_suffix }}
          path: ${{ matrix.binary_pattern }}
          if-no-files-found: error

  # --- Optional: Build for Linux ARM64 using a self-hosted runner (Template) ---
  # build-linux-arm64-self-hosted:
  #   name: Build for Linux (ARM64 Self-Hosted)
  #   # ... (rest of the template as before if you plan to use it) ...